package model;

import java.util.SimpleTimeZone;

import javax.swing.SingleSelectionModel;

public class MemberThread extends Member implements Runnable {
	
	protected volatile boolean running = true;

	public MemberThread(String name, Status status) {
		super(name, status);
	}
	
	public static void main(String[] args) {
		Thread t = new Thread("BorrowLaptop");		
		t.start();
		
		// Attente touche pour le main
		try {
			System.in.read();
			// Instructions pour stopper
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void run() {
		while (true) {
            // Traitement 1
            for (int i = 0; i < 10; i++) { // Boucle imbriquée
                // Traitement 2
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    if (correct)
                        Thread.currentThread().interrupt(); // réinterruption sur soi-même
                    System.out.println("premier Catch");
                    break; // Sortir de la boucle <italique>for</italique>
                }
            }
            try {
                // Traitement 3
                System.out.print("Devant le sleep, ");
                Thread.sleep(1000);
                System.out.print("Derrière le sleep, ");
            } catch (InterruptedException ex) {
                if (correct)
                    Thread.currentThread().interrupt();
                System.out.println("Deuxième catch");
                break; // Sortir de la boucle <italique>while</italique>
            }
        }
        System.out.println("Fermeture du Thread");
	}
}